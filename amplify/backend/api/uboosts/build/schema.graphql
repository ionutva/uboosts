
type Task @aws_iam @aws_api_key {
  id: ID!
  uid: Int
  title: String
  dueDate: AWSDate
  description: String
  assignee: [Assignee]
  tags: [String]
  isCompleted: Boolean
  isDeleted: Boolean
  isImportant: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Assignee @aws_iam @aws_api_key {
  fullName: String!
  avatar: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input AssigneeInput {
  fullName: String!
  avatar: String
}

type ModelTaskConnection @aws_api_key @aws_iam {
  items: [Task]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTaskFilterInput {
  id: ModelIDInput
  uid: ModelIntInput
  title: ModelStringInput
  dueDate: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  isCompleted: ModelBooleanInput
  isDeleted: ModelBooleanInput
  isImportant: ModelBooleanInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

type Query {
  getTask(id: ID!): Task @aws_api_key @aws_iam
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection @aws_api_key @aws_iam
  syncTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTaskConnection @aws_api_key @aws_iam
}

input ModelTaskConditionInput {
  uid: ModelIntInput
  title: ModelStringInput
  dueDate: ModelStringInput
  description: ModelStringInput
  tags: ModelStringInput
  isCompleted: ModelBooleanInput
  isDeleted: ModelBooleanInput
  isImportant: ModelBooleanInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
}

input CreateTaskInput {
  id: ID
  uid: Int
  title: String
  dueDate: AWSDate
  description: String
  assignee: [AssigneeInput]
  tags: [String]
  isCompleted: Boolean
  isDeleted: Boolean
  isImportant: Boolean
  _version: Int
}

input UpdateTaskInput {
  id: ID!
  uid: Int
  title: String
  dueDate: AWSDate
  description: String
  assignee: [AssigneeInput]
  tags: [String]
  isCompleted: Boolean
  isDeleted: Boolean
  isImportant: Boolean
  _version: Int
}

input DeleteTaskInput {
  id: ID!
  _version: Int
}

type Mutation {
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task @aws_api_key @aws_iam
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task @aws_api_key @aws_iam
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task @aws_api_key @aws_iam
}

input ModelSubscriptionTaskFilterInput {
  id: ModelSubscriptionIDInput
  uid: ModelSubscriptionIntInput
  title: ModelSubscriptionStringInput
  dueDate: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  isCompleted: ModelSubscriptionBooleanInput
  isDeleted: ModelSubscriptionBooleanInput
  isImportant: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionTaskFilterInput]
  or: [ModelSubscriptionTaskFilterInput]
}

type Subscription {
  onCreateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["createTask"]) @aws_api_key @aws_iam
  onUpdateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["updateTask"]) @aws_api_key @aws_iam
  onDeleteTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: ["deleteTask"]) @aws_api_key @aws_iam
}

